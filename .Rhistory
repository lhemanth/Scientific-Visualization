{
print(q[i,j])
}
}
for(i in seq_len(nrow(q)))
{
for(j in seq_len(ncol(q)))
{
print(q[,i])
}
}
m1<-array(0,dim = c(4,3,5))
dim(m1)
install.packages("caret")
library(caret)
data("iris")
dataset<-iris
dim(dataset)
dataset
sapply(dataset, class)
head(dataset)
head(dataset)
levels(dataset$Species)
percentage <- prop.table(table(dataset$Species)) * 100
percentage
cbind(freq=table(dataset$Species), percentage=percentage)
summary(dataset)
x <- dataset[,1:4]
y <- dataset[,5]
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])
}
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])
}
plot(y)
featurePlot(x=x, y=y, plot="ellipse")
install.packages("ellipse")
featurePlot(x=x, y=y, plot="ellipse")
featurePlot(x=x, y=y, plot="box")
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
plot(y)
plot(y)
plot(y)
costs <- c(3, 15, 3, 10)
costs>5
costs(costs > 5)
costs[costs > 5]
mov<-martrix(1:25,5,5)
mov<-martrix[1:25,5,5]
mov<-matrix[1:25,5,5]
mov<-matrix(1:25,5,5)
mov[5,5]
john <- list(“studentid“ = 9, “age” = 18, “courses” = c(“Data Science 101”, “Data Science Methodology”))
john <- list(studendid = 9, “age” = 18, “courses” = c(“Data Science 101”, “Data Science Methodology”))
john <- list("studentid" = 9, “age” = 18, “courses” = c(“Data Science 101”, “Data Science Methodology”))
data.frame(student = c(john, mary), id = c(1, 2))
data.frame("student" = c("john", "mary"), "id" = c(1, 2))
if( chance_precipitation > 0.5 ) {
print("Bring an umbrella") } else {
print("Don't bring an umbrella")}
chance_precipitation <- 0.80
if( chance_precipitation > 0.5 ) {
print("Bring an umbrella") } else {
print("Don't bring an umbrella")}
type(john)
class(john)
class(costs)
a<-c("hello","hi")
nchar(a)
length(a)
a.nchar()
numberOfCharacters[a]
install.packages("arulesViz")
> str(titanic.raw)
str(titanic.raw)
load("C:/Users/LELLA HEMANTH/Downloads/titanic.raw.rdata")
str(titanic.raw)
library(arules)
summary(titanic.raw)
rules.all <- apriori(titanic.raw)
inspect(rules.all)
rules <- apriori(titanic.raw,
+ control = list(verbose=F),
+ parameter = list(minlen=2, supp=0.005, conf=0.8),
+ appearance = list(rhs=c("Survived=No",
+ "Survived=Yes"),
+ default="lhs"))
rules <- apriori(titanic.raw,+ control = list(verbose=F),+ parameter = list(minlen=2, supp=0.005, conf=0.8)+ appearance = list(rhs=c("Survived=No",+ "Survived=Yes")+ default="lhs"))
Rules <- apriori(titanic.raw,+ control = list(verbose=F),+ parameter = list(minlen=2, supp=0.005, conf=0.8),+ appearance = list(rhs=c("Survived=No",+ "Survived=Yes"),+ default="lhs"))
> inspect(rules.pruned)
inspect(rules.pruned)
> rules.pruned <- rules.sorted[!redundant]
rules.pruned <- rules.sorted[!redundant]
subset.matrix <- is.subset(rules.sorted, rules.sorted)
quality(rules) <- round(quality(rules), digits=3)
rules <- apriori(titanic.raw,control = list(verbose=F),parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"))
quality(rules) <- round(quality(rules), digits=3)
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
> library(arulesViz)
library(arulesViz)
plot(rules.all, method = "graph")
plot(rules.all)
plot(rules.all, method = "graph")
plot(rules.all, method = "grouped")
str(titanic.raw)
library(arules)
summary(titanic.raw)
rules.all <- apriori(titanic.raw)
inspect(rules.all)
Rules <- apriori(titanic.raw,+ control = list(verbose=F),+ parameter = list(minlen=2, supp=0.005, conf=0.8),+ appearance = list(rhs=c("Survived=No",+ "Survived=Yes"),+ default="lhs"))
inspect(rules.all)
rules <- apriori(titanic.raw,control = list(verbose=F),parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"))
quality(rules) <- round(quality(rules), digits=3)
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA
redundant <- colSums(subset.matrix, na.rm = T) >= 1
which(redundant)
inspect(rules.pruned)
library(arulesViz)
plot(rules.all, method = "graph")
plot(rules.all)
plot(rules, method = "graph")
plot(rules.all, method = "graph")
install.packages("httr")
install.packages("XML")
install.packages("stringr")
install.packages("ggplot2")
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url = 'https://www.whitehouse.gov/...[1].jpg'
URL.emoface = 'https://api.projectoxford.a...
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
URL.emoface = 'https://westus.api.cognitive.microsoft.com/emotion/v1.0'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
URL.emoface = 'https://westus.api.cognitive.microsoft.com/emotion/v1.0'
emotionKEY = '69de476e0e5642f089a521bcf0e91495'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
options(scipen=999)
faceEMO
Obama = httr::content(faceEMO)[[1]]
o<-as.data.frame(as.matrix(Obama$scores))
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
URL.emoface = 'https://westus.api.cognitive.microsoft.com/emotion/v1.0'
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = 'https://timesofindia.indiatimes.com/thumb/msid-59124684,width-400,resizemode-4/59124684.jpg'
# Define Microsoft API URL to request data
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
# Define access key (access key is available via: https://www.microsoft.com/cognitive-services/en-us/emotion-api)
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
# Define image
mybody = list(url = img.url)
# Request data from Microsoft
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
# Show request results (if Status=200, request is okay)
faceEMO
# Reuqest results from face analysis
Obama = httr::content(faceEMO)[[1]]
Obama
# Define results in data frame
o<-as.data.frame(as.matrix(Obama$scores))
# Make some transformation
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
# Define names
o$Emotion<- rownames(o)
# Make plot
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
# Define image source
img.url     = 'C:/Users/LELLA HEMANTH/Desktop/image/vir.jpg'
# Define Microsoft API URL to request data
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
# Define access key (access key is available via: https://www.microsoft.com/cognitive-services/en-us/emotion-api)
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
# Define image
mybody = list(url = img.url)
# Request data from Microsoft
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
# Show request results (if Status=200, request is okay)
faceEMO
# Reuqest results from face analysis
Obama = httr::content(faceEMO)[[1]]
Obama
# Define results in data frame
o<-as.data.frame(as.matrix(Obama$scores))
# Make some transformation
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
# Define names
o$Emotion<- rownames(o)
# Make plot
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "C:/Users/LELLA HEMANTH/Desktop/image/vir.jpg"
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = "C:/Users/LELLA HEMANTH/Desktop/image/vir.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
img.url     = "https://i.pinimg.com/736x/1f/b7/98/1fb79884c395f23bd4816243cf148086--beard-styles-virat-kohli.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "http://www.vrsiddhartha.ac.in/nss/slide1.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
img.url     = "http://www.vrsiddhartha.ac.in/nss/s1.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
options(scipen=999)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = "http://www.hindustantimes.com/rf/image_size_960x540/HT/p2/2017/01/28/Pictures/cricket-india-international-england-third-one-day_34b45e80-e556-11e6-9542-52468f740e4a.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
install.packages("Rvision")
install.packages("ROpenCVLite")
img.url     = "http://nssvrsec.site90.net/s1.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "file:///C:/Users/LELLA%20HEMANTH/Desktop/image/vir.jpg"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
options(scipen=999)
img.url     = "http://nssvrsec.site90.net/gallery/0.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
o<-as.data.frame(as.matrix(Obama$scores))
o$V1 <- lapply(strsplit(as.character(o$V1 ), "e"), "[", 1)
o$V1<-as.numeric(o$V1)
colnames(o)[1] <- "Level"
o$Emotion<- rownames(o)
ggplot(data=o, aes(x=Emotion, y=Level)) +
geom_bar(stat="identity")
img.url     = "http://nssvrsec.site90.net/gallery/1.png"
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = '5ad16ac8bf63420e88af0f42b8f89f1d'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
png(file="1.png",width = 196,height = 196,res = 1400)
x <- 1:100
y <- 1:100
plot(x, y) # Make plot
tiff("Plot1.tiff")
dev.off()
getwd()
getwd()
setwd(C:/Users/LELLA HEMANTH/Documents/visulization)
setwd(C:\Users\LELLA HEMANTH\Documents\visulization)
setwd(C:\\Users\\LELLA HEMANTH\\Documents\\visulization)
setwd(C:/Users/LELLA HEMANTH/Documents/visulization)
setwd(C:/Users/LELLA HEMANTH/Documents/visulization)
setwd('C:/Users/LELLA HEMANTH/Documents/visulization')
library(imager)
install.packages(imager)
library('imager')
install.packages("imager")
library(imager)
im<-load.image(bird)
im<-load.image('C:/Users/LELLA HEMANTH/Documents/visulization/bird.ppm')
install.packages("magick")
install.packages("magick")
library(magick)
library(magick)
im<-load.image('C:/Users/LELLA HEMANTH/Documents/visulization/bird.ppm')
library(imager)
im<-load.image('C:/Users/LELLA HEMANTH/Documents/visulization/bird.ppm')
getwd()
library(imager)
library(plyr)
install.packages('plyr')
library(imager)
library(magick)
install.packages('knitr')
library(magick)
im<-load.image('C:/Users/LELLA HEMANTH/Documents/visulization/bird.ppm')
imr<-image_read('C:/Users/LELLA HEMANTH/Documents/visulization/bird.ppm')
plot(imr)
grayscale(imr) %>% hist(main="Luminance values in boats picture")
hist(imr)
library(ggplot2)
library(dplyr)
bdf <- as.data.frame(imr)
